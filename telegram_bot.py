import asyncio
import logging
import os
import json
import aiohttp
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
IS_PRODUCTION = os.getenv("RENDER", "false").lower() == "true"
if IS_PRODUCTION:
    API_BASE_URL = "https://target-ai-prlm.onrender.com"
else:
    API_BASE_URL = "http://localhost:5000"  # Flask API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

logger.info(f"Telegram –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API: {API_BASE_URL}")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns")],
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="create_campaign")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üé¨ –î–µ–º–æ workflow", callback_data="demo_workflow")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üéØ *Target AI* - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–µ–∫–ª–∞–º–µ

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ –∫—Ä–µ–∞—Ç–∏–≤–∞, –∏ —è:
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
‚Ä¢ –ó–∞–ø—É—â—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "campaigns":
        await show_campaigns(query, context)
    elif query.data == "create_campaign":
        await start_campaign_creation(query, context)
    elif query.data == "analytics":
        await show_analytics(query, context)
    elif query.data == "settings":
        await show_settings(query, context)
    elif query.data == "demo_workflow":
        await demo_workflow(query, context)
    elif query.data == "confirm_campaign":
        await confirm_campaign_creation(query, context)
    elif query.data == "back_to_menu":
        await show_main_menu(query, context)

async def show_campaigns(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/campaigns") as response:
                if response.status == 200:
                    data = await response.json()
                    campaigns = data.get("campaigns", [])
                    
                    if campaigns:
                        text = "*üìä –í–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏:*\n\n"
                        for campaign in campaigns:
                            status_emoji = "üü¢" if campaign["status"] == "ACTIVE" else "üî¥"
                            text += f"{status_emoji} *{campaign['name']}*\n"
                            text += f"üí∞ –ë—é–¥–∂–µ—Ç: ${campaign['daily_budget']}/–¥–µ–Ω—å\n"
                            text += f"üéØ –¶–µ–ª—å: {campaign['objective']}\n\n"
                    else:
                        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!"
                else:
                    text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π"
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {str(e)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_campaign_creation(query, context):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    user_id = query.from_user.id
    user_states[user_id] = {"state": "awaiting_media"}
    
    text = """
üé® *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏*

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ –≤–∞—à–µ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF, WebP
‚Ä¢ üé• –í–∏–¥–µ–æ: MP4, AVI, MOV

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 –ú–ë
    """
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    user_id = update.from_user.id
    
    if user_id not in user_states or user_states[user_id].get("state") != "awaiting_media":
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é' –≤ –º–µ–Ω—é.")
        return
    
    await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∫—Ä–µ–∞—Ç–∏–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            file_name = f"image_{user_id}.jpg"
        elif update.message.video:
            file = await update.message.video.get_file()
            file_name = f"video_{user_id}.mp4"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_bytes = await file.download_as_bytearray()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ (–∏–º–∏—Ç–∞—Ü–∏—è)
        analysis_result = await analyze_media_mock(file_bytes, file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        user_states[user_id]["analysis"] = analysis_result
        user_states[user_id]["state"] = "analysis_complete"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        await show_analysis_result(update, analysis_result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

async def analyze_media_mock(file_bytes, filename):
    """–ú–æ–∫ –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API)"""
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    return {
        "status": "success",
        "analysis": {
            "target_audience": {
                "age_range": "25-45",
                "interests": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "–±–∏–∑–Ω–µ—Å"],
                "demographics": "–≥–æ—Ä–æ–¥—Å–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥"
            },
            "campaign_objective": "CONVERSIONS",
            "ad_copy_suggestions": [
                "–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞! üöÄ",
                "–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è",
                "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç—ã—Å—è—á–∞–º –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
            ],
            "budget_recommendation": {
                "daily_budget": 50,
                "currency": "USD"
            },
            "creative_insights": {
                "style": "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
                "colors": ["—Å–∏–Ω–∏–π", "–±–µ–ª—ã–π"],
                "emotions": ["–¥–æ–≤–µ—Ä–∏–µ", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"]
            }
        }
    }

async def show_analysis_result(update, analysis_result):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    analysis = analysis_result.get("analysis", {})
    
    text = "‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
    
    # –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
    audience = analysis.get("target_audience", {})
    text += f"üë• *–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:*\n"
    text += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {audience.get('age_range', 'N/A')}\n"
    text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(audience.get('interests', []))}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç
    budget = analysis.get("budget_recommendation", {})
    text += f"üí∞ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç:*\n"
    text += f"${budget.get('daily_budget', 0)}/–¥–µ–Ω—å\n\n"
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞
    ad_copies = analysis.get("ad_copy_suggestions", [])
    if ad_copies:
        text += f"üìù *–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        for i, copy in enumerate(ad_copies[:2], 1):
            text += f"{i}. {copy}\n"
        text += "\n"
    
    # –ò–Ω—Å–∞–π—Ç—ã –∫—Ä–µ–∞—Ç–∏–≤–∞
    insights = analysis.get("creative_insights", {})
    text += f"üé® *–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞:*\n"
    text += f"‚Ä¢ –°—Ç–∏–ª—å: {insights.get('style', 'N/A')}\n"
    if insights.get('colors'):
        text += f"‚Ä¢ –¶–≤–µ—Ç–∞: {', '.join(insights['colors'])}\n"
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="confirm_campaign")],
        [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="create_campaign")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def confirm_campaign_creation(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    user_id = query.from_user.id
    
    if user_id not in user_states or "analysis" not in user_states[user_id]:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    await query.edit_message_text("üöÄ –°–æ–∑–¥–∞—é –∫–∞–º–ø–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
        analysis_data = user_states[user_id]["analysis"]
        campaign_result = await create_campaign_mock(analysis_data)
        
        if campaign_result["status"] == "success":
            campaign = campaign_result["campaign"]
            text = f"""
‚úÖ *–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*

üìä *{campaign['name']}*
üéØ –¶–µ–ª—å: {campaign['objective']}
üí∞ –ë—é–¥–∂–µ—Ç: ${campaign['budget']}/–¥–µ–Ω—å
üìÖ –°–æ–∑–¥–∞–Ω–∞: {campaign['created_at'][:10]}

üöÄ –ö–∞–º–ø–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É!

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ü–µ—Ä–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ö –∏ –∫–ª–∏–∫–∞—Ö
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            """
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)
        
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def create_campaign_mock(analysis_data):
    """–ú–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    import random
    from datetime import datetime
    
    analysis = analysis_data.get("analysis", {})
    campaign_id = f"camp_{random.randint(100000, 999999)}"
    
    return {
        "status": "success",
        "campaign": {
            "campaign_id": campaign_id,
            "name": f"AI Campaign - {datetime.now().strftime('%Y%m%d_%H%M')}",
            "objective": analysis.get("campaign_objective", "CONVERSIONS"),
            "budget": analysis.get("budget_recommendation", {}).get("daily_budget", 50),
            "created_at": datetime.now().isoformat(),
            "status": "ACTIVE"
        }
    }

async def show_analytics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    text = """
üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π*

üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:
‚Ä¢ –ü–æ–∫–∞–∑—ã: 12,450
‚Ä¢ –ö–ª–∏–∫–∏: 523
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: 47
‚Ä¢ CTR: 4.2%
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞: $1.25
‚Ä¢ ROAS: 3.2

üéØ –õ—É—á—à–∞—è –∫–∞–º–ø–∞–Ω–∏—è: "AI Campaign 001"
üìâ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è: "Test Campaign 2"
    """
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_settings(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = """
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã
üí∞ –í–∞–ª—é—Ç–∞: USD
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+3
üéØ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞

üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç:
‚Ä¢ –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏
‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –±—é–¥–∂–µ—Ç–∞
‚Ä¢ –ü—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def demo_workflow(query, context):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ workflow"""
    await query.edit_message_text("üé¨ –ó–∞–ø—É—Å–∫–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/api/workflow/demo") as response:
                if response.status == 200:
                    data = await response.json()
                    
                    text = "‚úÖ *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                    text += "üéØ –ü—Ä–æ—Ü–µ—Å—Å –≤–∫–ª—é—á–∞–ª:\n"
                    text += "1. ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞ –ò–ò\n"
                    text += "2. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\n"
                    text += "3. ‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫\n"
                    text += "4. ‚úÖ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n\n"
                    
                    workflow = data.get("workflow", {})
                    if "step_2_campaign_creation" in workflow:
                        campaign = workflow["step_2_campaign_creation"].get("campaign", {})
                        text += f"üìä –°–æ–∑–¥–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign.get('name', 'N/A')}\n"
                        text += f"üí∞ –ë—é–¥–∂–µ—Ç: ${campaign.get('budget', 0)}/–¥–µ–Ω—å\n"
                    
                    if "step_4_optimization" in workflow:
                        optimizations = workflow["step_4_optimization"].get("optimizations", [])
                        if optimizations:
                            text += f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(optimizations)} –ø—É–Ω–∫—Ç–æ–≤\n"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_main_menu(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns")],
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="create_campaign")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üé¨ –î–µ–º–æ workflow", callback_data="demo_workflow")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üéØ *Target AI* - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Target AI Telegram Bot...")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    application.add_handler(MessageHandler(
        filters.PHOTO | filters.VIDEO, 
        handle_media
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ Target AI Bot –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == "__main__":
    main()
