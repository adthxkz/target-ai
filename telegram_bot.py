import asyncio
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.path.exists(".env"):
    load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
MOCK_CAMPAIGNS = [
    {
        "id": "123456789",
        "name": "Test Campaign 1",
        "status": "ACTIVE",
        "objective": "CONVERSIONS",
        "daily_budget": 1000,
        "lifetime_budget": 10000
    },
    {
        "id": "987654321",
        "name": "Test Campaign 2",
        "status": "PAUSED",
        "objective": "TRAFFIC",
        "daily_budget": 500,
        "lifetime_budget": 5000
    }
]

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns"),
            InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data="budget")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ Facebook.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def campaigns_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    campaigns_text = "üìä *–í–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏:*\n\n"
    for campaign in MOCK_CAMPAIGNS:
        status_emoji = "‚úÖ" if campaign["status"] == "ACTIVE" else "‚è∏"
        campaigns_text += f"{status_emoji} *{campaign['name']}*\n"
        campaigns_text += f"   ID: {campaign['id']}\n"
        campaigns_text += f"   –°—Ç–∞—Ç—É—Å: {campaign['status']}\n"
        campaigns_text += f"   –î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: ${campaign['daily_budget']}\n\n"
    
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        campaigns_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def budget_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç"""
    query = update.callback_query
    await query.answer()
    
    total_daily = sum(c["daily_budget"] for c in MOCK_CAMPAIGNS if c["status"] == "ACTIVE")
    total_lifetime = sum(c["lifetime_budget"] for c in MOCK_CAMPAIGNS)
    
    budget_text = f"üí∞ *–ë—é–¥–∂–µ—Ç:*\n\n"
    budget_text += f"–û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: *${total_daily}*\n"
    budget_text += f"–û–±—â–∏–π –ª–∞–π—Ñ—Ç–∞–π–º –±—é–¥–∂–µ—Ç: *${total_lifetime}*\n\n"
    budget_text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {len([c for c in MOCK_CAMPAIGNS if c['status'] == 'ACTIVE'])}\n"
    budget_text += f"–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(MOCK_CAMPAIGNS)}"
    
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        budget_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    stats_text = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    stats_text += "üîÑ –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Facebook.\n\n"
    stats_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
    stats_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã\n‚Ä¢ –ö–ª–∏–∫–∏\n‚Ä¢ CTR\n‚Ä¢ CPC\n‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏\n‚Ä¢ ROAS"
    
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        stats_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    settings_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"
    settings_text += "üîÑ –†–µ–∂–∏–º: –î–µ–º–æ\n"
    settings_text += "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "üåê –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n\n"
    settings_text += "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Facebook –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
    
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        settings_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns"),
            InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data="budget")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(campaigns_handler, pattern="^campaigns$"))
    app.add_handler(CallbackQueryHandler(budget_handler, pattern="^budget$"))
    app.add_handler(CallbackQueryHandler(stats_handler, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(settings_handler, pattern="^settings$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    
    print("ü§ñ Target AI Telegram Bot –∑–∞–ø—É—â–µ–Ω...")
    print("üí¨ –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
