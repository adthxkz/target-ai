import requests
import io
from PIL import Image
import json

def test_image_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (500, 300), color='blue')
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='JPEG')
    img_buffer.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π Flask API
    try:
        response = requests.post(
            'http://localhost:5000/api/analyze-media',
            files={'file': ('test_image.jpg', img_buffer, 'image/jpeg')},
            data={'user_preferences': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {result['analysis']['target_audience']['age_range']}")
            print(f"üéØ –¶–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏: {result['analysis']['campaign_objective']}")
            print(f"üí∞ –ë—é–¥–∂–µ—Ç: {result['analysis']['budget_recommendation']['daily_budget']} {result['analysis']['budget_recommendation']['currency']}")
            print(f"üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {result['analysis']['ad_copy_suggestions'][0]}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Flask API –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_video_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ (–º–æ–∫)"""
    print("\nüé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª 
    video_data = b"mock_video_data"
    
    try:
        response = requests.post(
            'http://localhost:5000/api/analyze-media',
            files={'file': ('test_video.mp4', io.BytesIO(video_data), 'video/mp4')},
            data={'user_preferences': '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {result['analysis']['target_audience']['age_range']}")
            print(f"üéØ –¶–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏: {result['analysis']['campaign_objective']}")
            print(f"üí∞ –ë—é–¥–∂–µ—Ç: {result['analysis']['budget_recommendation']['daily_budget']} {result['analysis']['budget_recommendation']['currency']}")
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['analysis']['creative_insights'].get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Flask API –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_production_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω API –Ω–∞ Render"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω API...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (300, 200), color='red')
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)
    
    try:
        response = requests.post(
            'https://target-ai-prlm.onrender.com/api/analyze-media',
            files={'file': ('test_prod.png', img_buffer, 'image/png')},
            data={'user_preferences': '—Å—Ç–∞—Ä—Ç–∞–ø –≤ —Å—Ñ–µ—Ä–µ –ò–¢'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üìä –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {result['analysis']['target_audience']['demographics']}")
            print(f"üé® –°—Ç–∏–ª—å –∫—Ä–µ–∞—Ç–∏–≤–∞: {result['analysis']['creative_insights']['style']}")
            print(f"üîß –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {result.get('services_available', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω API: {response.status_code}")
            try:
                print(f"–î–µ—Ç–∞–ª–∏: {response.json()}")
            except:
                print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω API: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–µ–¥–∏–∞...")
    test_image_analysis()
    test_video_analysis()
    test_production_api()
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
