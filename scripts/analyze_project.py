#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import os
import glob

def analyze_project_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤
    categories = {
        'main_code': [],
        'test_files': [],
        'documentation': [],
        'config_files': [],
        'deprecated': [],
        'temp_files': []
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_files = glob.glob('**/*', recursive=True)
    
    for file_path in all_files:
        if os.path.isfile(file_path):
            filename = os.path.basename(file_path)
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            if filename.startswith('test_') or '/tests/' in file_path:
                categories['test_files'].append(file_path)
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            elif filename.endswith('.md'):
                categories['documentation'].append(file_path)
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            elif filename in ['requirements.txt', '.env', '.env.example', '.gitignore', 'render.yaml', 'pyproject.toml']:
                categories['config_files'].append(file_path)
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            elif '/tmp/' in file_path or filename.endswith('.tmp'):
                categories['temp_files'].append(file_path)
            
            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã (–ø–æ –∏–º–µ–Ω–∞–º)
            elif any(keyword in filename.lower() for keyword in ['old', 'backup', 'copy', '_v1', 'deprecated']):
                categories['deprecated'].append(file_path)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
            elif filename.endswith(('.py', '.yaml', '.yml', '.json')):
                categories['main_code'].append(file_path)
    
    return categories

def find_duplicates():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã"""
    
    duplicates = {
        'telegram_bots': ['telegram_bot.py', 'telegram_bot_v2.py', 'bot.py'],
        'apis': ['target_ai_api.py', 'flask_app.py', 'app/main.py'],
        'requirements': ['requirements.txt', 'requirements.txt.new'],
        'readmes': ['README.md', 'README_NEW.md']
    }
    
    return duplicates

def recommend_cleanup():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ"""
    
    recommendations = {
        'delete': [
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            'test_bot_integration.py',  # –¥—É–±–ª–∏—Ä—É–µ—Ç test_telegram_bot.py
            'test_simple_bot.py',       # –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
            'test_fixed_integration.py', # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
            'test_bot_production.py',   # –¥—É–±–ª–∏—Ä—É–µ—Ç check_after_setup.py
            
            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã
            'telegram_bot.py',          # —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è, –µ—Å—Ç—å v2
            'bot.py',                   # –µ—â–µ –æ–¥–Ω–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
            'target_ai_api.py',         # –¥—É–±–ª–∏—Ä—É–µ—Ç app/main.py
            'flask_app.py',             # fallback, –Ω–µ –Ω—É–∂–µ–Ω
            'requirements.txt.new',     # –¥—É–±–ª–∏–∫–∞—Ç
            'README_NEW.md',            # –¥—É–±–ª–∏–∫–∞—Ç
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            'tmp/*',                    # –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            '__main__.py',              # –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            'setup.py',                 # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        ],
        
        'move_to_folder': [
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É tests/
            ('test_*.py', 'tests/'),
            ('check_*.py', 'tests/'),
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ docs/
            ('*.md', 'docs/'),
        ],
        
        'rename': [
            ('telegram_bot_v2.py', 'telegram_bot.py'),  # —É–±—Ä–∞—Ç—å v2 –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        ],
        
        'keep': [
            'app/',                     # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            'requirements.txt',         # –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            '.env.example',            # —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            '.gitignore',              # –ø—Ä–∞–≤–∏–ª–∞ Git
            'render.yaml',             # –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–ø–ª–æ—è
        ]
    }
    
    return recommendations

if __name__ == "__main__":
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ Target AI")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = analyze_project_files()
    
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í:")
    for category, files in categories.items():
        print(f"   {category}: {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = find_duplicates()
    print("\nüîÑ –ù–ê–ô–î–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´:")
    for group, files in duplicates.items():
        existing_files = [f for f in files if os.path.exists(f)]
        if len(existing_files) > 1:
            print(f"   {group}: {existing_files}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = recommend_cleanup()
    
    print("\nüóëÔ∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ö –£–î–ê–õ–ï–ù–ò–Æ:")
    for file in recommendations['delete'][:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        if os.path.exists(file):
            size = os.path.getsize(file) if not file.endswith('*') else 0
            print(f"   ‚ùå {file} ({size} bytes)")
    
    print("\nüìÅ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ö –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:")
    for pattern, folder in recommendations['move_to_folder']:
        print(f"   üìÇ {pattern} ‚Üí {folder}")
    
    print("\n‚úÇÔ∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø:")
    total_test_files = len(categories['test_files'])
    total_docs = len(categories['documentation'])
    print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_test_files}")
    print(f"   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {total_docs}")
    print(f"   –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(categories['temp_files'])}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
    print("   2. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print("   3. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ –ø–∞–ø–∫—É tests/")
    print("   4. –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã")
    print("   5. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π telegram_bot_v2.py")
