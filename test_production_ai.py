import requests
import io
from PIL import Image, ImageDraw, ImageFont
import time

def test_production_after_deploy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω API –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è —Å AI"""
    print("üåê –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω API...")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è...")
    time.sleep(30)
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_cases = [
        {
            "name": "tech_startup",
            "color": "blue",
            "text": "AI STARTUP",
            "subtitle": "Future is now!",
            "preference": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç–∞–ø —Å –ò–ò"
        },
        {
            "name": "food_delivery",
            "color": "orange",
            "text": "FAST FOOD",
            "subtitle": "Delivery 24/7",
            "preference": "—Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã"
        },
        {
            "name": "fitness_app",
            "color": "green",
            "text": "GET FIT",
            "subtitle": "Your health app",
            "preference": "—Ñ–∏—Ç–Ω–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏"
        }
    ]
    
    for case in test_cases:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {case['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (600, 400), color='white')
        draw = ImageDraw.Draw(img)
        
        # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
        color_map = {
            "blue": "#1E40AF",
            "orange": "#F97316", 
            "green": "#16A34A"
        }
        draw.rectangle([50, 50, 550, 350], fill=color_map[case['color']])
        draw.rectangle([60, 60, 540, 340], fill='white')
        
        try:
            font_large = ImageFont.truetype("arial.ttf", 48)
            font_small = ImageFont.truetype("arial.ttf", 24)
        except:
            font_large = ImageFont.load_default()
            font_small = ImageFont.load_default()
        
        # –¢–µ–∫—Å—Ç
        draw.text((100, 120), case['text'], fill=color_map[case['color']], font=font_large)
        draw.text((100, 200), case['subtitle'], fill='gray', font=font_small)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_buffer = io.BytesIO()
        img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        try:
            response = requests.post(
                'https://target-ai-prlm.onrender.com/api/analyze-media',
                files={'file': (f'{case["name"]}.png', img_buffer, 'image/png')},
                data={'user_preferences': case['preference']},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                analysis = result['analysis']
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {case['name']} —É—Å–ø–µ—à–µ–Ω!")
                print(f"üéØ –¶–µ–ª—å: {analysis.get('campaign_objective', 'N/A')}")
                print(f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {analysis.get('target_audience', {}).get('age_range', 'N/A')}")
                print(f"üí° –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(analysis.get('target_audience', {}).get('interests', [])[:3])}")
                print(f"üí∞ –ë—é–¥–∂–µ—Ç: ${analysis.get('budget_recommendation', {}).get('daily_budget', 'N/A')}")
                print(f"üîß AI –∞–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if result.get('services_available') else '–ù–µ—Ç (fallback)'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
                content_words = case['text'].lower().split() + case['subtitle'].lower().split()
                analysis_text = str(analysis).lower()
                
                relevant_found = any(word in analysis_text for word in content_words if len(word) > 3)
                if relevant_found:
                    print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!")
                else:
                    print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {case['name']}: {response.status_code}")
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {case['name']} - —Å–µ—Ä–≤–µ—Ä –µ—â–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {case['name']}: {e}")

def test_video_analysis_prod():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    print(f"\nüé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    video_content = b"FAKE_VIDEO_DATA_FOR_TESTING_PRODUCTION"
    
    try:
        response = requests.post(
            'https://target-ai-prlm.onrender.com/api/analyze-media',
            files={'file': ('marketing_video.mp4', io.BytesIO(video_content), 'video/mp4')},
            data={'user_preferences': '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è SaaS –ø—Ä–æ–¥—É–∫—Ç–∞'},
            timeout=20
        )
        
        if response.status_code == 200:
            result = response.json()
            analysis = result['analysis']
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–µ–Ω!")
            print(f"üéØ –¶–µ–ª—å: {analysis.get('campaign_objective', 'N/A')}")
            print(f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {analysis.get('target_audience', {}).get('age_range', 'N/A')}")
            print(f"üì± –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {', '.join(analysis.get('placement_suggestions', [])[:2])}")
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis.get('creative_insights', {}).get('duration', 'N/A')}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω API –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è —Å AI...")
    test_production_after_deploy()
    test_video_analysis_prod()
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
