from fastapi import FastAPI, HTTPException
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import asyncio
import os
import logging
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
import sys
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from telegram_bot_v2 import (
        start, 
        button_callback, 
        handle_media,
        BOT_TOKEN
    )
    HANDLERS_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("Telegram bot v2 handlers imported successfully")
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.error(f"Failed to import v2 handlers: {e}")
    HANDLERS_AVAILABLE = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.path.exists(os.path.join(os.path.dirname(__file__), "..", ".env")):
    load_dotenv(os.path.join(os.path.dirname(__file__), "..", ".env"))

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

class TelegramBot:
    def __init__(self):
        self.app = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")
            
        if not self.app:
            if HANDLERS_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞
                self.app = Application.builder().token(TELEGRAM_TOKEN).build()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                self.app.add_handler(CommandHandler("start", start))
                self.app.add_handler(CallbackQueryHandler(button_callback))
                self.app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_media))
                
                logger.info("Telegram –±–æ—Ç v2 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                # –ü—Ä–æ—Å—Ç–æ–π fallback –±–æ—Ç –±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                async def simple_start(update, context):
                    await update.message.reply_text(
                        "ü§ñ Target AI Bot\n\n"
                        "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n"
                        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API:\n"
                        "https://target-ai-prlm.onrender.com"
                    )
                
                self.app = Application.builder().token(TELEGRAM_TOKEN).build()
                self.app.add_handler(CommandHandler("start", simple_start))
                logger.info("Telegram –±–æ—Ç (–ø—Ä–æ—Å—Ç–æ–π fallback) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
            await self.app.initialize()
            await self.app.start()
            
            # –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook, –ª–æ–∫–∞–ª—å–Ω–æ polling
            if os.getenv("RENDER", "false").lower() == "true":
                # Production: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
                webhook_url = f"https://target-ai-prlm.onrender.com/webhook/telegram"
                await self.app.bot.set_webhook(webhook_url)
                logger.info(f"Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(self._run_polling())
                logger.info("Telegram polling –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
                
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def _run_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            await self.app.updater.start_polling()
            await self.app.updater.idle()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.app:
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            try:
                await self.app.bot.delete_webhook()
            except:
                pass
                
            await self.app.stop()
            await self.app.shutdown()
            self.app = None
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.app:
            await self.app.stop()
            await self.app.shutdown()
            self.app = None
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot_instance = TelegramBot()

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    await bot_instance.start()
