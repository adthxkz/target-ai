import requests
import io
from PIL import Image, ImageDraw, ImageFont
import json

def create_business_image():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–∑–Ω–µ—Å —Å—Ç–∏–ª–µ"""
    img = Image.new('RGB', (800, 600), color='#1E3A8A')  # –°–∏–Ω–∏–π
    draw = ImageDraw.Draw(img)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.truetype("arial.ttf", 48)
    except:
        font = ImageFont.load_default()
    
    # –ë–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    draw.rectangle([100, 200, 700, 400], fill='white')
    draw.text((120, 250), "BUSINESS", fill='#1E3A8A', font=font)
    draw.text((120, 310), "SOLUTION", fill='#1E3A8A', font=font)
    
    return img

def create_tech_image():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–æ —Å—Ç–∏–ª–µ"""
    img = Image.new('RGB', (600, 400), color='#000000')  # –ß–µ—Ä–Ω—ã–π
    draw = ImageDraw.Draw(img)
    
    # –ó–µ–ª–µ–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∫–∞–∫ –∫–æ–¥)
    for i in range(0, 600, 20):
        draw.line([(i, 0), (i, 400)], fill='#00FF00', width=1)
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
    draw.ellipse([200, 150, 400, 250], fill='#00FF41')
    
    try:
        font = ImageFont.truetype("arial.ttf", 24)
    except:
        font = ImageFont.load_default()
    
    draw.text((250, 190), "TECH", fill='black', font=font)
    
    return img

def create_food_image():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∏—â–µ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ"""
    img = Image.new('RGB', (500, 500), color='#FFA500')  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    draw = ImageDraw.Draw(img)
    
    # –ö—Ä—É–≥ –∫–∞–∫ —Ç–∞—Ä–µ–ª–∫–∞
    draw.ellipse([50, 50, 450, 450], fill='#FFFFFF')
    draw.ellipse([60, 60, 440, 440], fill='#FFD700')
    
    # "–ï–¥–∞" –≤ —Ü–µ–Ω—Ç—Ä–µ
    draw.ellipse([200, 200, 300, 300], fill='#FF6347')  # –¢–æ–º–∞—Ç–Ω—ã–π
    
    try:
        font = ImageFont.truetype("arial.ttf", 32)
    except:
        font = ImageFont.load_default()
    
    draw.text((210, 360), "FOOD", fill='#8B4513', font=font)
    
    return img

def test_different_images():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    images = [
        ("business", create_business_image(), "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"),
        ("tech", create_tech_image(), "IT —Å—Ç–∞—Ä—Ç–∞–ø"),
        ("food", create_food_image(), "—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã")
    ]
    
    for name, img, preference in images:
        print(f"\nüì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_buffer = io.BytesIO()
        img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
            response = requests.post(
                'https://target-ai-prlm.onrender.com/api/analyze-media',
                files={'file': (f'{name}_test.png', img_buffer, 'image/png')},
                data={'user_preferences': preference}
            )
            
            if response.status_code == 200:
                result = response.json()
                analysis = result['analysis']
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {name} —É—Å–ø–µ—à–µ–Ω!")
                print(f"üéØ –¶–µ–ª—å: {analysis['campaign_objective']}")
                print(f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {analysis['target_audience']['age_range']}")
                print(f"üí° –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(analysis['target_audience']['interests'][:3])}")
                print(f"üí∞ –ë—é–¥–∂–µ—Ç: ${analysis['budget_recommendation']['daily_budget']}/–¥–µ–Ω—å")
                print(f"üìù –¢–µ–∫—Å—Ç: {analysis['ad_copy_suggestions'][0]}")
                print(f"üé® –°—Ç–∏–ª—å: {analysis['creative_insights']['style']}")
                print(f"üîß AI –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if result.get('services_available') else '–ù–µ—Ç (fallback)'}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {name}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {name}: {e}")

def test_video_mock():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ"""
    print(f"\nüé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    video_content = b"FAKE_VIDEO_CONTENT_FOR_TESTING"
    
    try:
        response = requests.post(
            'https://target-ai-prlm.onrender.com/api/analyze-media',
            files={'file': ('promo_video.mp4', io.BytesIO(video_content), 'video/mp4')},
            data={'user_preferences': '–ø—Ä–æ–º–æ —Ä–æ–ª–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'}
        )
        
        if response.status_code == 200:
            result = response.json()
            analysis = result['analysis']
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–µ–Ω!")
            print(f"üéØ –¶–µ–ª—å: {analysis['campaign_objective']}")
            print(f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {analysis['target_audience']['age_range']}")
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['creative_insights'].get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"üì± –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {', '.join(analysis['placement_suggestions'][:2])}")
            print(f"üí∞ –ë—é–¥–∂–µ—Ç: ${analysis['budget_recommendation']['daily_budget']}/–¥–µ–Ω—å")
            print(f"üé≠ –≠–º–æ—Ü–∏–∏: {', '.join(analysis['creative_insights']['emotions'][:2])}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {e}")

if __name__ == "__main__":
    print("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–µ–¥–∏–∞...")
    test_different_images()
    test_video_mock()
    print("\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
