import os
import asyncio
from app.services.media_analysis import MediaAnalysisService
from PIL import Image
import io
import json

async def test_real_openai_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç OpenAI –∞–Ω–∞–ª–∏–∑–∞"""
    print("üß™ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    service = MediaAnalysisService()
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {'–î–∞' if service.openai_api_key else '–ù–µ—Ç'}")
    print(f"ü§ñ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {'–î–∞' if service.client else '–ù–µ—Ç'}")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    img = Image.new('RGB', (600, 400), color='white')
    from PIL import ImageDraw, ImageFont
    draw = ImageDraw.Draw(img)
    
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–æ—Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç
    draw.rectangle([50, 50, 550, 150], fill='blue')
    draw.rectangle([60, 60, 540, 140], fill='white')
    
    try:
        font = ImageFont.truetype("arial.ttf", 36)
    except:
        font = ImageFont.load_default()
    
    draw.text((100, 80), "TECH STARTUP", fill='blue', font=font)
    draw.text((100, 200), "Innovation for Everyone", fill='gray', font=font)
    draw.text((100, 300), "Join us today!", fill='green', font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)
    
    print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º 'TECH STARTUP'")
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        result = await service.analyze_image(img_buffer.read(), "tech_startup.png")
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result['status']}")
        
        if 'raw_response' in result:
            raw = result['raw_response']
            if "—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" in raw:
                print("‚ö†Ô∏è –≠—Ç–æ fallback –æ—Ç–≤–µ—Ç, –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π OpenAI")
            else:
                print("‚úÖ –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI!")
                print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {raw[:200]}...")
        
        analysis = result.get('analysis', {})
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"üéØ –¶–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏: {analysis.get('campaign_objective')}")
        print(f"üë• –í–æ–∑—Ä–∞—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {analysis.get('target_audience', {}).get('age_range')}")
        print(f"üí° –ò–Ω—Ç–µ—Ä–µ—Å—ã: {analysis.get('target_audience', {}).get('interests', [])[:3]}")
        print(f"üí∞ –ë—é–¥–∂–µ—Ç: ${analysis.get('budget_recommendation', {}).get('daily_budget')}")
        print(f"üé® –°—Ç–∏–ª—å: {analysis.get('creative_insights', {}).get('style')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ
        if "TECH" in str(analysis) or "startup" in str(analysis).lower():
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        else:
            print("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ fallback)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_real_openai_analysis())
