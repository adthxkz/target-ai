#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import shutil
import glob

def cleanup_project():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Target AI")
    print("=" * 40)
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_delete = [
        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        'test_bot_integration.py',
        'test_simple_bot.py', 
        'test_fixed_integration.py',
        'test_bot_production.py',
        'test_openai_connection.py',
        
        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–æ—Ç—ã
        'telegram_bot.py',  # –µ—Å—Ç—å v2
        'bot.py',           # —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        
        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ API
        'target_ai_api.py', # –¥—É–±–ª–∏—Ä—É–µ—Ç app/main.py
        'flask_app.py',     # fallback –Ω–µ –Ω—É–∂–µ–Ω
        
        # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã
        'requirements.txt.new',
        'README_NEW.md',
        
        # –ü—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
        '__main__.py',
        'setup.py',
    ]
    
    # –ü–∞–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    folders_to_clean = [
        'tmp/',  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    ]
    
    deleted_count = 0
    saved_bytes = 0
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:")
    for file_path in files_to_delete:
        if os.path.exists(file_path):
            try:
                size = os.path.getsize(file_path)
                os.remove(file_path)
                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω: {file_path} ({size} bytes)")
                deleted_count += 1
                saved_bytes += size
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏
    print("\nüìÅ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫:")
    for folder in folders_to_clean:
        if os.path.exists(folder):
            try:
                files_in_folder = glob.glob(f"{folder}*")
                for file_path in files_in_folder:
                    if os.path.isfile(file_path):
                        size = os.path.getsize(file_path)
                        os.remove(file_path)
                        saved_bytes += size
                        deleted_count += 1
                print(f"   ‚úÖ –û—á–∏—â–µ–Ω–∞: {folder} ({len(files_in_folder)} —Ñ–∞–π–ª–æ–≤)")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {folder}: {e}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    print("\nüîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:")
    if os.path.exists('telegram_bot_v2.py'):
        if not os.path.exists('telegram_bot.py'):  # –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —É–∂–µ —É–¥–∞–ª–µ–Ω
            try:
                shutil.move('telegram_bot_v2.py', 'telegram_bot.py')
                print(f"   ‚úÖ telegram_bot_v2.py ‚Üí telegram_bot.py")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        else:
            print(f"   ‚ö†Ô∏è telegram_bot.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    print("\nüìÇ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫:")
    folders_to_create = ['docs', 'tests/integration', 'scripts']
    
    for folder in folders_to_create:
        if not os.path.exists(folder):
            try:
                os.makedirs(folder)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {folder}/")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {folder}: {e}")
        else:
            print(f"   ‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder}/")
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
    print("\nüì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:")
    moves = [
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ docs/
        ('*.md', 'docs/'),
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã –≤ tests/
        ('test_*.py', 'tests/'),
        ('check_*.py', 'tests/'),
        # –°–∫—Ä–∏–ø—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        ('analyze_project.py', 'scripts/'),
    ]
    
    for pattern, destination in moves:
        files = glob.glob(pattern)
        for file_path in files:
            if os.path.isfile(file_path):
                dest_path = os.path.join(destination, os.path.basename(file_path))
                try:
                    shutil.move(file_path, dest_path)
                    print(f"   ‚úÖ {file_path} ‚Üí {dest_path}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {file_path}: {e}")
    
    print("\n" + "=" * 40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ß–ò–°–¢–ö–ò:")
    print(f"   –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    print(f"   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {saved_bytes:,} bytes ({saved_bytes/1024:.1f} KB)")
    print("\n‚ú® –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω –∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω!")
    
    return deleted_count, saved_bytes

if __name__ == "__main__":
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç —Ñ–∞–π–ª—ã!")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å backup –∏–ª–∏ Git commit.")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞']:
        deleted, saved = cleanup_project()
        print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {saved/1024:.1f} KB")
    else:
        print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
